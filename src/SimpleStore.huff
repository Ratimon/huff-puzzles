
/** 
 *  SIMPLE_STORE HUFF EXERCISE
 *
 *  One of the storage locations available to devs when writing smart contracts is Storage. Its persistent and expensive
 *  
 *  The task is to write within the `MAIN` macro below, 2 functions...
 *      - One named `store()` that takes one function argument and stores it in storage slot 0,
 *      - the second named `read()` that simply returns what is stored at storage slot 0.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function store(uint256) payable returns()
#define function read() payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {

    0x00 calldataload  0xE0 shr        // [ the first 4 bytes of msg.data]

    dup1 __FUNC_SIG(read) eq read jumpi  // [ the first 4 bytes of msg.data]
    dup1 __FUNC_SIG(store) eq store jumpi  // [ the first 4 bytes of msg.data]

    // if no matchs are found
    // Revert the return data of call context start at offset 0x00 by size 0x00 
    // revert( 0x0, 0x0) :  revert( offset, size)
    0x00 0x00 revert     //  [  the first 4 bytes of msg.data] 

    read:
        0x00 sload
        0x00 mstore
        returnvalue jump

    store:
        0x04 calldataload
        0x00 sstore
        returnvalue jump

    returnvalue:
        0x20 0x00 return

    
}