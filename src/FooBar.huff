
/** 
 *  FOO_BAR HUFF EXERCISE
 *
 *  Majority of ethereum contracts hold logic divide this logic into functions which users can specify and call to execute a particular logic without clashing into the other
 *  
 *  The task is to write within the `MAIN` macro below, huff code that mimics 2 solidity functions. 
 *      - One named `foo()` that simply returns 2,
 *      - the second named `bar()` that simply returns 3.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function foo() payable returns(uint256)
 #define function bar() payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {


    0x00 calldataload  0xE0 shr        // [ the first 4 bytes of msg.data]

    dup1 __FUNC_SIG(foo) eq foo jumpi  // [ the first 4 bytes of msg.data]
    dup1 __FUNC_SIG(bar) eq bar jumpi  // [ the first 4 bytes of msg.data]

    // if no matchs are found
    // Revert the return data of call context start at offset 0x00 by size 0x00 
    // revert( 0x0, 0x0) :  revert( offset, size)
    0x00 0x00 revert     //  [  the first 4 bytes of msg.data] 

    foo:
        pop
        0x02 0x00 mstore
        returnvalue jump

    bar:
        pop
        0x03 0x00 mstore
        returnvalue jump

    returnvalue:
        0x20 0x00 return



}