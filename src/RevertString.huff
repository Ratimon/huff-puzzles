
/**
 *  REVERT_STRING HUFF EXERCISE
 *
 *
 *  When a transaction is being executed within a smart contract, based on the logic of that contract, it can revert if a preset condition is not met.
 *  They're 2 main ways to revert in solidity, 
 *  - using a string error message e,g (`require(x != 0, "Only values above 0");`)
 *  - reverting with a custom error e.g (`if(x == 0) revert OnlyValuesAbove0();`)
 *
 *  The task is to write within the `MAIN` macro below, huff code that reverts (all the time) with the string error message `Only Huff`
*/


#define macro MAIN() = takes(0) returns(0) {

    // cast --format-bytes32-string "Only Huff"
    
    // Strings are basically dynamic arrays for the evm
    0x20 0x00 mstore                    // mstore the  offset to the start of dynamic array (The ABI encoding)
    0x09 0x20 mstore                    // mstore the length of the dynamic array
    __RIGHTPAD(0x4f6e6c792048756666) 0x40 mstore    // mstore the value at the next slot
    0x60 0x00 revert

    // https://ethereum.stackexchange.com/questions/60563/why-is-the-returndata-of-a-function-returning-bytes-formatted-in-a-weird-way/60570#60570

    // memory
    
    // 0000000000000000000000000000000000000000000000000000000000000020 - offset to the start of data (The ABI encoding)
    // 0000000000000000000000000000000000000000000000000000000000000009 - length
    // 4f6e6c7920487566660000000000000000000000000000000000000000000000 - encoded string
    
}
